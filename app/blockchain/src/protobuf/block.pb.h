// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_block_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_block_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_block_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_block_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_block_2eproto;
namespace block_chain {
class BlockProto;
struct BlockProtoDefaultTypeInternal;
extern BlockProtoDefaultTypeInternal _BlockProto_default_instance_;
class TransactionInputProto;
struct TransactionInputProtoDefaultTypeInternal;
extern TransactionInputProtoDefaultTypeInternal _TransactionInputProto_default_instance_;
class TransactionOutputProto;
struct TransactionOutputProtoDefaultTypeInternal;
extern TransactionOutputProtoDefaultTypeInternal _TransactionOutputProto_default_instance_;
class TransactionProto;
struct TransactionProtoDefaultTypeInternal;
extern TransactionProtoDefaultTypeInternal _TransactionProto_default_instance_;
}  // namespace block_chain
PROTOBUF_NAMESPACE_OPEN
template<> ::block_chain::BlockProto* Arena::CreateMaybeMessage<::block_chain::BlockProto>(Arena*);
template<> ::block_chain::TransactionInputProto* Arena::CreateMaybeMessage<::block_chain::TransactionInputProto>(Arena*);
template<> ::block_chain::TransactionOutputProto* Arena::CreateMaybeMessage<::block_chain::TransactionOutputProto>(Arena*);
template<> ::block_chain::TransactionProto* Arena::CreateMaybeMessage<::block_chain::TransactionProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace block_chain {

// ===================================================================

class BlockProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:block_chain.BlockProto) */ {
 public:
  inline BlockProto() : BlockProto(nullptr) {}
  ~BlockProto() override;
  explicit PROTOBUF_CONSTEXPR BlockProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockProto(const BlockProto& from);
  BlockProto(BlockProto&& from) noexcept
    : BlockProto() {
    *this = ::std::move(from);
  }

  inline BlockProto& operator=(const BlockProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockProto& operator=(BlockProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockProto* internal_default_instance() {
    return reinterpret_cast<const BlockProto*>(
               &_BlockProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockProto& a, BlockProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockProto& from) {
    BlockProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "block_chain.BlockProto";
  }
  protected:
  explicit BlockProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
    kHashFieldNumber = 3,
    kPrevHashFieldNumber = 4,
    kTimestampFieldNumber = 2,
    kNonceFieldNumber = 5,
    kIsValidFieldNumber = 6,
  };
  // repeated .block_chain.TransactionProto transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::block_chain::TransactionProto* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionProto >*
      mutable_transactions();
  private:
  const ::block_chain::TransactionProto& _internal_transactions(int index) const;
  ::block_chain::TransactionProto* _internal_add_transactions();
  public:
  const ::block_chain::TransactionProto& transactions(int index) const;
  ::block_chain::TransactionProto* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionProto >&
      transactions() const;

  // bytes hash = 3;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes prev_hash = 4;
  void clear_prev_hash();
  const std::string& prev_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_hash();
  PROTOBUF_NODISCARD std::string* release_prev_hash();
  void set_allocated_prev_hash(std::string* prev_hash);
  private:
  const std::string& _internal_prev_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_hash(const std::string& value);
  std::string* _internal_mutable_prev_hash();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 nonce = 5;
  void clear_nonce();
  int64_t nonce() const;
  void set_nonce(int64_t value);
  private:
  int64_t _internal_nonce() const;
  void _internal_set_nonce(int64_t value);
  public:

  // bool is_valid = 6;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:block_chain.BlockProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionProto > transactions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_hash_;
    int64_t timestamp_;
    int64_t nonce_;
    bool is_valid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class TransactionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:block_chain.TransactionProto) */ {
 public:
  inline TransactionProto() : TransactionProto(nullptr) {}
  ~TransactionProto() override;
  explicit PROTOBUF_CONSTEXPR TransactionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionProto(const TransactionProto& from);
  TransactionProto(TransactionProto&& from) noexcept
    : TransactionProto() {
    *this = ::std::move(from);
  }

  inline TransactionProto& operator=(const TransactionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionProto& operator=(TransactionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionProto* internal_default_instance() {
    return reinterpret_cast<const TransactionProto*>(
               &_TransactionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionProto& a, TransactionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionProto& from) {
    TransactionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "block_chain.TransactionProto";
  }
  protected:
  explicit TransactionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kOutputsFieldNumber = 3,
    kTxIdFieldNumber = 1,
  };
  // repeated .block_chain.TransactionInputProto inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::block_chain::TransactionInputProto* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionInputProto >*
      mutable_inputs();
  private:
  const ::block_chain::TransactionInputProto& _internal_inputs(int index) const;
  ::block_chain::TransactionInputProto* _internal_add_inputs();
  public:
  const ::block_chain::TransactionInputProto& inputs(int index) const;
  ::block_chain::TransactionInputProto* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionInputProto >&
      inputs() const;

  // repeated .block_chain.TransactionOutputProto outputs = 3;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::block_chain::TransactionOutputProto* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionOutputProto >*
      mutable_outputs();
  private:
  const ::block_chain::TransactionOutputProto& _internal_outputs(int index) const;
  ::block_chain::TransactionOutputProto* _internal_add_outputs();
  public:
  const ::block_chain::TransactionOutputProto& outputs(int index) const;
  ::block_chain::TransactionOutputProto* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionOutputProto >&
      outputs() const;

  // string tx_id = 1;
  void clear_tx_id();
  const std::string& tx_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx_id();
  PROTOBUF_NODISCARD std::string* release_tx_id();
  void set_allocated_tx_id(std::string* tx_id);
  private:
  const std::string& _internal_tx_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_id(const std::string& value);
  std::string* _internal_mutable_tx_id();
  public:

  // @@protoc_insertion_point(class_scope:block_chain.TransactionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionInputProto > inputs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionOutputProto > outputs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class TransactionInputProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:block_chain.TransactionInputProto) */ {
 public:
  inline TransactionInputProto() : TransactionInputProto(nullptr) {}
  ~TransactionInputProto() override;
  explicit PROTOBUF_CONSTEXPR TransactionInputProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionInputProto(const TransactionInputProto& from);
  TransactionInputProto(TransactionInputProto&& from) noexcept
    : TransactionInputProto() {
    *this = ::std::move(from);
  }

  inline TransactionInputProto& operator=(const TransactionInputProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInputProto& operator=(TransactionInputProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionInputProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionInputProto* internal_default_instance() {
    return reinterpret_cast<const TransactionInputProto*>(
               &_TransactionInputProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionInputProto& a, TransactionInputProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInputProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionInputProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionInputProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionInputProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionInputProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionInputProto& from) {
    TransactionInputProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInputProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "block_chain.TransactionInputProto";
  }
  protected:
  explicit TransactionInputProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxIdFieldNumber = 1,
    kSignatureFieldNumber = 3,
    kPublicKeyFieldNumber = 4,
    kVoutFieldNumber = 2,
  };
  // string tx_id = 1;
  void clear_tx_id();
  const std::string& tx_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx_id();
  PROTOBUF_NODISCARD std::string* release_tx_id();
  void set_allocated_tx_id(std::string* tx_id);
  private:
  const std::string& _internal_tx_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_id(const std::string& value);
  std::string* _internal_mutable_tx_id();
  public:

  // string signature = 3;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string public_key = 4;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // int64 vout = 2;
  void clear_vout();
  int64_t vout() const;
  void set_vout(int64_t value);
  private:
  int64_t _internal_vout() const;
  void _internal_set_vout(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:block_chain.TransactionInputProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    int64_t vout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class TransactionOutputProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:block_chain.TransactionOutputProto) */ {
 public:
  inline TransactionOutputProto() : TransactionOutputProto(nullptr) {}
  ~TransactionOutputProto() override;
  explicit PROTOBUF_CONSTEXPR TransactionOutputProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOutputProto(const TransactionOutputProto& from);
  TransactionOutputProto(TransactionOutputProto&& from) noexcept
    : TransactionOutputProto() {
    *this = ::std::move(from);
  }

  inline TransactionOutputProto& operator=(const TransactionOutputProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOutputProto& operator=(TransactionOutputProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOutputProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOutputProto* internal_default_instance() {
    return reinterpret_cast<const TransactionOutputProto*>(
               &_TransactionOutputProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransactionOutputProto& a, TransactionOutputProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOutputProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOutputProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOutputProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOutputProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionOutputProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionOutputProto& from) {
    TransactionOutputProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOutputProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "block_chain.TransactionOutputProto";
  }
  protected:
  explicit TransactionOutputProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:block_chain.TransactionOutputProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockProto

// repeated .block_chain.TransactionProto transactions = 1;
inline int BlockProto::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int BlockProto::transactions_size() const {
  return _internal_transactions_size();
}
inline void BlockProto::clear_transactions() {
  _impl_.transactions_.Clear();
}
inline ::block_chain::TransactionProto* BlockProto::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:block_chain.BlockProto.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionProto >*
BlockProto::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:block_chain.BlockProto.transactions)
  return &_impl_.transactions_;
}
inline const ::block_chain::TransactionProto& BlockProto::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const ::block_chain::TransactionProto& BlockProto::transactions(int index) const {
  // @@protoc_insertion_point(field_get:block_chain.BlockProto.transactions)
  return _internal_transactions(index);
}
inline ::block_chain::TransactionProto* BlockProto::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline ::block_chain::TransactionProto* BlockProto::add_transactions() {
  ::block_chain::TransactionProto* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:block_chain.BlockProto.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionProto >&
BlockProto::transactions() const {
  // @@protoc_insertion_point(field_list:block_chain.BlockProto.transactions)
  return _impl_.transactions_;
}

// int64 timestamp = 2;
inline void BlockProto::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t BlockProto::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t BlockProto::timestamp() const {
  // @@protoc_insertion_point(field_get:block_chain.BlockProto.timestamp)
  return _internal_timestamp();
}
inline void BlockProto::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void BlockProto::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:block_chain.BlockProto.timestamp)
}

// bytes hash = 3;
inline void BlockProto::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& BlockProto::hash() const {
  // @@protoc_insertion_point(field_get:block_chain.BlockProto.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_chain.BlockProto.hash)
}
inline std::string* BlockProto::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:block_chain.BlockProto.hash)
  return _s;
}
inline const std::string& BlockProto::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void BlockProto::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_hash() {
  // @@protoc_insertion_point(field_release:block_chain.BlockProto.hash)
  return _impl_.hash_.Release();
}
inline void BlockProto::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_chain.BlockProto.hash)
}

// bytes prev_hash = 4;
inline void BlockProto::clear_prev_hash() {
  _impl_.prev_hash_.ClearToEmpty();
}
inline const std::string& BlockProto::prev_hash() const {
  // @@protoc_insertion_point(field_get:block_chain.BlockProto.prev_hash)
  return _internal_prev_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_prev_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prev_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_chain.BlockProto.prev_hash)
}
inline std::string* BlockProto::mutable_prev_hash() {
  std::string* _s = _internal_mutable_prev_hash();
  // @@protoc_insertion_point(field_mutable:block_chain.BlockProto.prev_hash)
  return _s;
}
inline const std::string& BlockProto::_internal_prev_hash() const {
  return _impl_.prev_hash_.Get();
}
inline void BlockProto::_internal_set_prev_hash(const std::string& value) {
  
  _impl_.prev_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_prev_hash() {
  
  return _impl_.prev_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_prev_hash() {
  // @@protoc_insertion_point(field_release:block_chain.BlockProto.prev_hash)
  return _impl_.prev_hash_.Release();
}
inline void BlockProto::set_allocated_prev_hash(std::string* prev_hash) {
  if (prev_hash != nullptr) {
    
  } else {
    
  }
  _impl_.prev_hash_.SetAllocated(prev_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_hash_.IsDefault()) {
    _impl_.prev_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_chain.BlockProto.prev_hash)
}

// int64 nonce = 5;
inline void BlockProto::clear_nonce() {
  _impl_.nonce_ = int64_t{0};
}
inline int64_t BlockProto::_internal_nonce() const {
  return _impl_.nonce_;
}
inline int64_t BlockProto::nonce() const {
  // @@protoc_insertion_point(field_get:block_chain.BlockProto.nonce)
  return _internal_nonce();
}
inline void BlockProto::_internal_set_nonce(int64_t value) {
  
  _impl_.nonce_ = value;
}
inline void BlockProto::set_nonce(int64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:block_chain.BlockProto.nonce)
}

// bool is_valid = 6;
inline void BlockProto::clear_is_valid() {
  _impl_.is_valid_ = false;
}
inline bool BlockProto::_internal_is_valid() const {
  return _impl_.is_valid_;
}
inline bool BlockProto::is_valid() const {
  // @@protoc_insertion_point(field_get:block_chain.BlockProto.is_valid)
  return _internal_is_valid();
}
inline void BlockProto::_internal_set_is_valid(bool value) {
  
  _impl_.is_valid_ = value;
}
inline void BlockProto::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:block_chain.BlockProto.is_valid)
}

// -------------------------------------------------------------------

// TransactionProto

// string tx_id = 1;
inline void TransactionProto::clear_tx_id() {
  _impl_.tx_id_.ClearToEmpty();
}
inline const std::string& TransactionProto::tx_id() const {
  // @@protoc_insertion_point(field_get:block_chain.TransactionProto.tx_id)
  return _internal_tx_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_tx_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_chain.TransactionProto.tx_id)
}
inline std::string* TransactionProto::mutable_tx_id() {
  std::string* _s = _internal_mutable_tx_id();
  // @@protoc_insertion_point(field_mutable:block_chain.TransactionProto.tx_id)
  return _s;
}
inline const std::string& TransactionProto::_internal_tx_id() const {
  return _impl_.tx_id_.Get();
}
inline void TransactionProto::_internal_set_tx_id(const std::string& value) {
  
  _impl_.tx_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_tx_id() {
  
  return _impl_.tx_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_tx_id() {
  // @@protoc_insertion_point(field_release:block_chain.TransactionProto.tx_id)
  return _impl_.tx_id_.Release();
}
inline void TransactionProto::set_allocated_tx_id(std::string* tx_id) {
  if (tx_id != nullptr) {
    
  } else {
    
  }
  _impl_.tx_id_.SetAllocated(tx_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_id_.IsDefault()) {
    _impl_.tx_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_chain.TransactionProto.tx_id)
}

// repeated .block_chain.TransactionInputProto inputs = 2;
inline int TransactionProto::_internal_inputs_size() const {
  return _impl_.inputs_.size();
}
inline int TransactionProto::inputs_size() const {
  return _internal_inputs_size();
}
inline void TransactionProto::clear_inputs() {
  _impl_.inputs_.Clear();
}
inline ::block_chain::TransactionInputProto* TransactionProto::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:block_chain.TransactionProto.inputs)
  return _impl_.inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionInputProto >*
TransactionProto::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:block_chain.TransactionProto.inputs)
  return &_impl_.inputs_;
}
inline const ::block_chain::TransactionInputProto& TransactionProto::_internal_inputs(int index) const {
  return _impl_.inputs_.Get(index);
}
inline const ::block_chain::TransactionInputProto& TransactionProto::inputs(int index) const {
  // @@protoc_insertion_point(field_get:block_chain.TransactionProto.inputs)
  return _internal_inputs(index);
}
inline ::block_chain::TransactionInputProto* TransactionProto::_internal_add_inputs() {
  return _impl_.inputs_.Add();
}
inline ::block_chain::TransactionInputProto* TransactionProto::add_inputs() {
  ::block_chain::TransactionInputProto* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:block_chain.TransactionProto.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionInputProto >&
TransactionProto::inputs() const {
  // @@protoc_insertion_point(field_list:block_chain.TransactionProto.inputs)
  return _impl_.inputs_;
}

// repeated .block_chain.TransactionOutputProto outputs = 3;
inline int TransactionProto::_internal_outputs_size() const {
  return _impl_.outputs_.size();
}
inline int TransactionProto::outputs_size() const {
  return _internal_outputs_size();
}
inline void TransactionProto::clear_outputs() {
  _impl_.outputs_.Clear();
}
inline ::block_chain::TransactionOutputProto* TransactionProto::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:block_chain.TransactionProto.outputs)
  return _impl_.outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionOutputProto >*
TransactionProto::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:block_chain.TransactionProto.outputs)
  return &_impl_.outputs_;
}
inline const ::block_chain::TransactionOutputProto& TransactionProto::_internal_outputs(int index) const {
  return _impl_.outputs_.Get(index);
}
inline const ::block_chain::TransactionOutputProto& TransactionProto::outputs(int index) const {
  // @@protoc_insertion_point(field_get:block_chain.TransactionProto.outputs)
  return _internal_outputs(index);
}
inline ::block_chain::TransactionOutputProto* TransactionProto::_internal_add_outputs() {
  return _impl_.outputs_.Add();
}
inline ::block_chain::TransactionOutputProto* TransactionProto::add_outputs() {
  ::block_chain::TransactionOutputProto* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:block_chain.TransactionProto.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_chain::TransactionOutputProto >&
TransactionProto::outputs() const {
  // @@protoc_insertion_point(field_list:block_chain.TransactionProto.outputs)
  return _impl_.outputs_;
}

// -------------------------------------------------------------------

// TransactionInputProto

// string tx_id = 1;
inline void TransactionInputProto::clear_tx_id() {
  _impl_.tx_id_.ClearToEmpty();
}
inline const std::string& TransactionInputProto::tx_id() const {
  // @@protoc_insertion_point(field_get:block_chain.TransactionInputProto.tx_id)
  return _internal_tx_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionInputProto::set_tx_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_chain.TransactionInputProto.tx_id)
}
inline std::string* TransactionInputProto::mutable_tx_id() {
  std::string* _s = _internal_mutable_tx_id();
  // @@protoc_insertion_point(field_mutable:block_chain.TransactionInputProto.tx_id)
  return _s;
}
inline const std::string& TransactionInputProto::_internal_tx_id() const {
  return _impl_.tx_id_.Get();
}
inline void TransactionInputProto::_internal_set_tx_id(const std::string& value) {
  
  _impl_.tx_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionInputProto::_internal_mutable_tx_id() {
  
  return _impl_.tx_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionInputProto::release_tx_id() {
  // @@protoc_insertion_point(field_release:block_chain.TransactionInputProto.tx_id)
  return _impl_.tx_id_.Release();
}
inline void TransactionInputProto::set_allocated_tx_id(std::string* tx_id) {
  if (tx_id != nullptr) {
    
  } else {
    
  }
  _impl_.tx_id_.SetAllocated(tx_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_id_.IsDefault()) {
    _impl_.tx_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_chain.TransactionInputProto.tx_id)
}

// int64 vout = 2;
inline void TransactionInputProto::clear_vout() {
  _impl_.vout_ = int64_t{0};
}
inline int64_t TransactionInputProto::_internal_vout() const {
  return _impl_.vout_;
}
inline int64_t TransactionInputProto::vout() const {
  // @@protoc_insertion_point(field_get:block_chain.TransactionInputProto.vout)
  return _internal_vout();
}
inline void TransactionInputProto::_internal_set_vout(int64_t value) {
  
  _impl_.vout_ = value;
}
inline void TransactionInputProto::set_vout(int64_t value) {
  _internal_set_vout(value);
  // @@protoc_insertion_point(field_set:block_chain.TransactionInputProto.vout)
}

// string signature = 3;
inline void TransactionInputProto::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& TransactionInputProto::signature() const {
  // @@protoc_insertion_point(field_get:block_chain.TransactionInputProto.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionInputProto::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_chain.TransactionInputProto.signature)
}
inline std::string* TransactionInputProto::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:block_chain.TransactionInputProto.signature)
  return _s;
}
inline const std::string& TransactionInputProto::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void TransactionInputProto::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionInputProto::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionInputProto::release_signature() {
  // @@protoc_insertion_point(field_release:block_chain.TransactionInputProto.signature)
  return _impl_.signature_.Release();
}
inline void TransactionInputProto::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_chain.TransactionInputProto.signature)
}

// string public_key = 4;
inline void TransactionInputProto::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& TransactionInputProto::public_key() const {
  // @@protoc_insertion_point(field_get:block_chain.TransactionInputProto.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionInputProto::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_chain.TransactionInputProto.public_key)
}
inline std::string* TransactionInputProto::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:block_chain.TransactionInputProto.public_key)
  return _s;
}
inline const std::string& TransactionInputProto::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void TransactionInputProto::_internal_set_public_key(const std::string& value) {
  
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionInputProto::_internal_mutable_public_key() {
  
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionInputProto::release_public_key() {
  // @@protoc_insertion_point(field_release:block_chain.TransactionInputProto.public_key)
  return _impl_.public_key_.Release();
}
inline void TransactionInputProto::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_chain.TransactionInputProto.public_key)
}

// -------------------------------------------------------------------

// TransactionOutputProto

// string public_key = 1;
inline void TransactionOutputProto::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& TransactionOutputProto::public_key() const {
  // @@protoc_insertion_point(field_get:block_chain.TransactionOutputProto.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutputProto::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_chain.TransactionOutputProto.public_key)
}
inline std::string* TransactionOutputProto::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:block_chain.TransactionOutputProto.public_key)
  return _s;
}
inline const std::string& TransactionOutputProto::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void TransactionOutputProto::_internal_set_public_key(const std::string& value) {
  
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionOutputProto::_internal_mutable_public_key() {
  
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionOutputProto::release_public_key() {
  // @@protoc_insertion_point(field_release:block_chain.TransactionOutputProto.public_key)
  return _impl_.public_key_.Release();
}
inline void TransactionOutputProto::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_chain.TransactionOutputProto.public_key)
}

// string amount = 2;
inline void TransactionOutputProto::clear_amount() {
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& TransactionOutputProto::amount() const {
  // @@protoc_insertion_point(field_get:block_chain.TransactionOutputProto.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionOutputProto::set_amount(ArgT0&& arg0, ArgT... args) {
 
 _impl_.amount_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_chain.TransactionOutputProto.amount)
}
inline std::string* TransactionOutputProto::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:block_chain.TransactionOutputProto.amount)
  return _s;
}
inline const std::string& TransactionOutputProto::_internal_amount() const {
  return _impl_.amount_.Get();
}
inline void TransactionOutputProto::_internal_set_amount(const std::string& value) {
  
  _impl_.amount_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionOutputProto::_internal_mutable_amount() {
  
  return _impl_.amount_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionOutputProto::release_amount() {
  // @@protoc_insertion_point(field_release:block_chain.TransactionOutputProto.amount)
  return _impl_.amount_.Release();
}
inline void TransactionOutputProto::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  _impl_.amount_.SetAllocated(amount, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.amount_.IsDefault()) {
    _impl_.amount_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_chain.TransactionOutputProto.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace block_chain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_block_2eproto
